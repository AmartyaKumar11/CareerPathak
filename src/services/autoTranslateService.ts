import { useTranslation } from 'react-i18next';

interface TranslationCache {
  [key: string]: { [lang: string]: string };
}

// Simple mock translations for testing
const MOCK_TRANSLATIONS = {
  "Welcome back": {
    hi: "рд╡рд╛рдкрд╕ рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
    ur: "┘И╪з┘╛╪│ ╪о┘И╪┤ ╪в┘Е╪п█М╪п",
    ks: "рд╡рд╛рдкрд╕ рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
    dg: "рд╡рд╛рдкрд╕ рд╕реНрд╡рд╛рдЧрдд рд╣реИ"
  },
  "Let's get you started on your career journey!": {
    hi: "рдЖрдЗрдП рдЕрдкрдиреА рдХрд░рд┐рдпрд░ рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ!",
    ur: "╪в╪ж█М█Т ╪в┘╛ ┌й█Т ┌й█М╪▒█М╪ж╪▒ ┌й█Т ╪│┘Б╪▒ ┌й╪з ╪в╪║╪з╪▓ ┌й╪▒█М┌║!",
    ks: "рдЖрдЗрдП рдЕрдкрдиреА рдХрд░рд┐рдпрд░ рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ!",
    dg: "рдЖрдЗрдП рдЕрдкрдиреА рдХрд░рд┐рдп╪▒ рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ!"
  },
  "Loading your dashboard...": {
    hi: "рдЖрдкрдХрд╛ рдбреИрд╢рдмреЛрд░реНрдб рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    ur: "╪в┘╛ ┌й╪з ┌И█М╪┤ ╪и┘И╪▒┌И ┘Д┘И┌И █Б┘И ╪▒█Б╪з █Б█Т...",
    ks: "рдЖрдкрдХрд╛ рдбреИрд╢рдмреЛрд░реНрдб рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    dg: "рдЖрдкрдХрд╛ рдбреИрд╢рдмреЛрд░реНрдб рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ..."
  },
  "CareerPathak": {
    hi: "рдХрд░рд┐рдпрд░рдкрд╛рдердХ",
    ur: "┌й█М╪▒█М╪ж╪▒ ┘╛╪з╪к┌╛┌й",
    ks: "рдХрд░рд┐рдпрд░рдкрд╛рдердХ",
    dg: "рдХрд░рд┐рдпрд░рдкрд╛рдердХ"
  },
  "Your Career Journey": {
    hi: "рдЖрдкрдХреА рдХрд░рд┐рдпрд░ рдпрд╛рддреНрд░рд╛",
    ur: "╪в┘╛ ┌й╪з ┌й█М╪▒█М╪ж╪▒ ╪│┘Б╪▒",
    ks: "рдЖрдкрдХреА рдХрд░рд┐рдпрд░ рдпрд╛рддреНрд░рд╛",
    dg: "рдЖрдкрдХреА рдХрд░рд┐рдпрд░ рдпрд╛рддреНрд░рд╛"
  },
  "Settings": {
    hi: "рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
    ur: "╪к╪▒╪к█М╪и╪з╪к",
    ks: "рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
    dg: "рд╕реЗрдЯрд┐рдВрдЧреНрд╕"
  },
  "Sign Out": {
    hi: "рд╕рд╛рдЗрди рдЖрдЙрдЯ",
    ur: "╪│╪з╪ж┘Ж ╪в╪д┘╣",
    ks: "рд╕рд╛рдЗрди рдЖрдЙрдЯ",
    dg: "рд╕рд╛рдЗрди рдЖрдЙрдЯ"
  }
};

class AutoTranslateService {
  private cache: TranslationCache = {};
  private useMockTranslations = true; // Toggle for testing

  // Main translation method
  async translateText(text: string, targetLang: string): Promise<string> {
    console.log(`ЁЯМР AutoTranslateService: Translating "${text}" to "${targetLang}"`);
    
    // Check cache first
    if (this.cache[text] && this.cache[text][targetLang]) {
      console.log(`ЁЯУж Cache hit for "${text}" -> "${this.cache[text][targetLang]}"`);
      return this.cache[text][targetLang];
    }

    // Return original text if English
    if (targetLang === 'en') {
      console.log(`ЁЯЗ║ЁЯЗ╕ English detected, returning original text`);
      return text;
    }

    try {
      let translatedText: string;

      if (this.useMockTranslations && MOCK_TRANSLATIONS[text] && MOCK_TRANSLATIONS[text][targetLang]) {
        // Use mock translations for testing
        translatedText = MOCK_TRANSLATIONS[text][targetLang];
        console.log(`ЁЯОн Using mock translation: "${text}" -> "${translatedText}"`);
      } else {
        // Try to use real google-translate-api
        console.log(`ЁЯФД Attempting real translation...`);
        const mappedLang = this.mapLanguageCode(targetLang);
        
        try {
          const module = await import('google-translate-api');
          const translate = module.default || module;
          const result = await translate(text, { from: 'en', to: mappedLang });
          translatedText = result.text;
          console.log(`тЬЕ Google Translate API success: "${translatedText}"`);
        } catch (googleError) {
          console.warn(`тЪая╕П Google Translate API failed, using fallback:`, googleError.message);
          // Fallback to mock or original text
          translatedText = MOCK_TRANSLATIONS[text]?.[targetLang] || text;
        }
      }

      // Cache the result
      if (!this.cache[text]) this.cache[text] = {};
      this.cache[text][targetLang] = translatedText;

      console.log(`тЬЕ Final translation: "${text}" -> "${translatedText}"`);
      return translatedText;
    } catch (error) {
      console.error('тЭМ Translation error:', error);
      return text; // Fallback to original text
    }
  }

  // Map your language codes to Google's format
  private mapLanguageCode(lang: string): string {
    const mapping: { [key: string]: string } = {
      'en': 'en',
      'hi': 'hi',
      'ur': 'ur',
      'ks': 'hi', // Kashmiri fallback to Hindi (not directly supported)
      'dg': 'hi'  // Dogri fallback to Hindi (not directly supported)
    };
    return mapping[lang] || 'en';
  }

  // Toggle between mock and real translations
  setUseMockTranslations(useMock: boolean) {
    this.useMockTranslations = useMock;
    console.log(`ЁЯФз Translation mode: ${useMock ? 'Mock' : 'Real Google API'}`);
  }

  // Batch translate multiple texts
  async translateBatch(texts: string[], targetLang: string): Promise<string[]> {
    return Promise.all(texts.map(text => this.translateText(text, targetLang)));
  }

  // Clear cache if needed
  clearCache() {
    this.cache = {};
    console.log('ЁЯЧСя╕П Translation cache cleared');
  }
}

export const autoTranslateService = new AutoTranslateService();

// React Hook for automatic translation
export const useAutoTranslate = () => {
  const { i18n } = useTranslation();
  
  const translateText = async (text: string): Promise<string> => {
    if (i18n.language === 'en') return text;
    return await autoTranslateService.translateText(text, i18n.language);
  };

  return { translate: translateText, currentLanguage: i18n.language };
};